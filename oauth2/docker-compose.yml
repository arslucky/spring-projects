networks:
   oauth2:
      driver: bridge
      name: ${NETWORK}

services:
   zoo:
      image: bitnami/zookeeper:3.7.1
      container_name: ${ZOO}
      hostname: ${ZOO_HOST}
      networks: 
      - ${NETWORK}
      environment:
         ALLOW_ANONYMOUS_LOGIN: yes
         ZOO_PORT_NUMBER: ${ZOO_PORT}
      ports:
      - ${ZOO_PORT}:${ZOO_PORT}

   kafka1:
      image: bitnami/kafka:3.3.2
      container_name: ${KAFKA1}
      hostname: ${KAFKA_HOST1}
      networks: 
      - ${NETWORK}
      environment:      
         ALLOW_PLAINTEXT_LISTENER: yes
         KAFKA_ENABLE_KRAFT: no
         KAFKA_CFG_BROKER_ID: 1
         KAFKA_CFG_ZOOKEEPER_CONNECT: ${ZOO_HOST}:${ZOO_PORT}
         KAFKA_CFG_LISTENERS: PLAINTEXT://:${KAFKA_PORT1}
         KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://:${KAFKA_PORT1}
         KAFKA_CFG_OFFSETS_TOPIC_REPLICATION_FACTOR: ${KAFKA_CFG_OFFSETS_TOPIC_REPLICATION_FACTOR}
         KAFKA_CFG_MIN_INSYNC_REPLICAS: ${KAFKA_CFG_MIN_INSYNC_REPLICAS}
         KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE: ${KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE}
         KAFKA_CFG_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: ${KAFKA_CFG_TRANSACTION_STATE_LOG_REPLICATION_FACTOR}
         #Overridden min.insync.replicas config for the transaction topic.
         KAFKA_CFG_TRANSACTION_STATE_LOG_MIN_ISR: ${KAFKA_CFG_TRANSACTION_STATE_LOG_MIN_ISR}
      ports:
      - ${KAFKA_PORT1}:${KAFKA_PORT1}
      depends_on:
      - zoo

   kafka2:
      image: bitnami/kafka:3.3.2
      container_name: ${KAFKA2}
      hostname: ${KAFKA_HOST2}
      networks: 
      - ${NETWORK}
      environment:
         ALLOW_PLAINTEXT_LISTENER: yes
         KAFKA_ENABLE_KRAFT: no
         KAFKA_CFG_BROKER_ID: 2
         KAFKA_CFG_ZOOKEEPER_CONNECT: ${ZOO_HOST}:${ZOO_PORT}
         KAFKA_CFG_LISTENERS: PLAINTEXT://:${KAFKA_PORT2}
         KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://:${KAFKA_PORT2}
         KAFKA_CFG_OFFSETS_TOPIC_REPLICATION_FACTOR: ${KAFKA_CFG_OFFSETS_TOPIC_REPLICATION_FACTOR}
         KAFKA_CFG_MIN_INSYNC_REPLICAS: ${KAFKA_CFG_MIN_INSYNC_REPLICAS}
         KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE: ${KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE}
         KAFKA_CFG_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: ${KAFKA_CFG_TRANSACTION_STATE_LOG_REPLICATION_FACTOR}
         #Overridden min.insync.replicas config for the transaction topic.
         KAFKA_CFG_TRANSACTION_STATE_LOG_MIN_ISR: ${KAFKA_CFG_TRANSACTION_STATE_LOG_MIN_ISR}
      ports:
      - ${KAFKA_PORT2}:${KAFKA_PORT2}
      depends_on:
      - zoo

   kafka3:
      image: bitnami/kafka:3.3.2
      container_name: ${KAFKA3}
      hostname: ${KAFKA_HOST3}
      networks: 
      - ${NETWORK}
      environment:
         ALLOW_PLAINTEXT_LISTENER: yes
         KAFKA_ENABLE_KRAFT: no
         KAFKA_CFG_BROKER_ID: 3
         KAFKA_CFG_ZOOKEEPER_CONNECT: ${ZOO_HOST}:${ZOO_PORT}
         KAFKA_CFG_LISTENERS: PLAINTEXT://:${KAFKA_PORT3}
         KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://:${KAFKA_PORT3}
         KAFKA_CFG_OFFSETS_TOPIC_REPLICATION_FACTOR: ${KAFKA_CFG_OFFSETS_TOPIC_REPLICATION_FACTOR}
         KAFKA_CFG_MIN_INSYNC_REPLICAS: ${KAFKA_CFG_MIN_INSYNC_REPLICAS}
         KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE: ${KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE}
         KAFKA_CFG_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: ${KAFKA_CFG_TRANSACTION_STATE_LOG_REPLICATION_FACTOR}
         #Overridden min.insync.replicas config for the transaction topic.
         KAFKA_CFG_TRANSACTION_STATE_LOG_MIN_ISR: ${KAFKA_CFG_TRANSACTION_STATE_LOG_MIN_ISR}
      ports:
      - ${KAFKA_PORT3}:${KAFKA_PORT3}
      depends_on:
      - zoo
      
   kafka-setup:
      image: bitnami/kafka:3.3.2
      container_name: ${KAFKA_SETUP}
      networks: 
      - ${NETWORK}
      restart: "no"
      environment:
         LOG_TOPIC: ${LOG_TOPIC}
      command: /opt/bitnami/kafka/bin/kafka-topics.sh --create --topic ${LOG_TOPIC} --bootstrap-server ${KAFKA_HOST1}:${KAFKA_PORT1}
      depends_on:
      - kafka1

   mysql:
      image: mysql:8.0.32
      container_name: ${MYSQL}
      hostname: ${MYSQL_HOST}
      networks:
      - ${NETWORK}
      ports:
      - ${MYSQL_PORT}:${MYSQL_PORT}
      environment:
         MYSQL_TCP_PORT: ${MYSQL_PORT}
         MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}

   mysql-setup:
      image: mysql:8.0.32
      container_name: ${MYSQL_SETUP}
      networks:
      - ${NETWORK}
      restart: "no"
      environment:
         MYSQL_HOST: ${MYSQL_HOST}
         MYSQL_PORT: ${MYSQL_PORT}
         MYSQL_ROOT: ${MYSQL_ROOT}
         MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      working_dir: /app
      volumes:
         - type: bind
           source: ./customer-service/db
           target: /app
      command: ./initdb.sh
      depends_on:
      - mysql
      
   mongo:
      image: bitnami/mongodb:6.0.5
      container_name: ${MONGO}
      hostname: ${MONGO_HOST}
      networks:
      - ${NETWORK}
      ports:
      - ${MONGO_PORT}:${MONGO_PORT}
      environment:
         MONGODB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD}
         MONGODB_PORT_NUMBER: ${MONGO_PORT}

   mongo-setup:
      image: bitnami/mongodb:6.0.5
      container_name: ${MONGO_SETUP}
      networks:
      - ${NETWORK}
      restart: "no"
      environment:
         MONGO_HOST: ${MONGO_HOST}
         MONGO_PORT: ${MONGO_PORT}
         MONGO_ROOT: ${MONGO_ROOT}
         MONGO_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD}
      working_dir: /app
      volumes:
         - type: bind
           source: ./order-service/db
           target: /app
      command:  ./initdb.sh
      depends_on:
      - mongo
         
   config-server:
      image: eclipse-temurin:17-jdk-jammy
      container_name: ${CONFIG_SERVER}
      hostname: ${CONFIG_SERVER_HOST}
      networks: 
      - ${NETWORK}
      environment:
         LOG_DIR: ${LOG_DIR}
         CONFIG_SERVER_PORT: ${CONFIG_SERVER_PORT}
         KAFKA_HOSTS: ${KAFKA_HOSTS}
      ports:
      - ${CONFIG_SERVER_PORT}:${CONFIG_SERVER_PORT}
      working_dir: /app
      volumes:
         - type: bind
           source: ${LOG_HOST_DIR}
           target: ${LOG_CONTAINER_DIR}
         - type: bind
           source: ./config-server/target/
           target: /app
      command: java -jar config-server-0.0.1-SNAPSHOT-exec.jar
      depends_on:
      - kafka-setup

   log-server:
      image: eclipse-temurin:17-jdk-jammy
      container_name: ${LOG_SERVER}
      hostname: ${LOG_SERVER_HOST}
      networks: 
      - ${NETWORK}
      environment:
         LOG_DIR: ${LOG_DIR}
         CONFIG_SERVER_PORT: ${CONFIG_SERVER_PORT}
         KAFKA_HOSTS: ${KAFKA_HOSTS}
      working_dir: /app
      volumes:
         - type: bind
           source: ${LOG_HOST_DIR}
           target: ${LOG_CONTAINER_DIR}
         - type: bind
           source: ./log-server/target/
           target: /app
      command: java -jar log-server-0.0.1-SNAPSHOT-exec.jar
      depends_on:
      - kafka-setup
      
   eureka-server:
      image: eclipse-temurin:17-jdk-jammy
      container_name: ${EUREKA}
      hostname: ${EUREKA_HOST}
      networks: 
      - ${NETWORK}
      environment:
         LOG_DIR: ${LOG_DIR}
         EUREKA_PORT: ${EUREKA_PORT}
         KAFKA_HOSTS: ${KAFKA_HOSTS}
         CONFIG_SERVER_HOST: ${CONFIG_SERVER_HOST}
         CONFIG_SERVER_PORT: ${CONFIG_SERVER_PORT}
      ports:
      - ${EUREKA_PORT}:${EUREKA_PORT}
      working_dir: /app
      volumes:
         - type: bind
           source: ${LOG_HOST_DIR}
           target: ${LOG_CONTAINER_DIR}
         - type: bind
           source: ./eureka-server/target/
           target: /app
      command: java -jar eureka-server-0.0.1-SNAPSHOT-exec.jar
      depends_on:
      - kafka-setup
      - config-server
      
   auth-server:
      image: eclipse-temurin:8-jdk-jammy
      container_name: ${AUTH}
      hostname: ${AUTH_HOST}
      networks: 
      - ${NETWORK}
      environment:
         LOG_DIR: ${LOG_DIR}
         ZOO_HOST: ${ZOO_HOST}
         ZOO_PORT: ${ZOO_PORT}
         KAFKA_HOSTS: ${KAFKA_HOSTS}
         CONFIG_SERVER_HOST: ${CONFIG_SERVER_HOST}
         CONFIG_SERVER_PORT: ${CONFIG_SERVER_PORT}
      ports:
      - ${AUTH_PORT}:${AUTH_PORT}
      working_dir: /app
      volumes:
         - type: bind
           source: ${LOG_HOST_DIR}
           target: ${LOG_CONTAINER_DIR}
         - type: bind
           source: ./authorization-server/target/
           target: /app
      command: java -jar authorization-server-0.0.1-SNAPSHOT-exec.jar
      depends_on:
      - kafka-setup
      - config-server

   gateway-server:
      image: eclipse-temurin:8-jdk-jammy
      container_name: ${GTW}
      hostname: ${GTW_HOST}
      networks: 
      - ${NETWORK}
      environment:
         LOG_DIR: ${LOG_DIR}
         ZOO_HOST: ${ZOO_HOST}
         ZOO_PORT: ${ZOO_PORT}
         KAFKA_HOSTS: ${KAFKA_HOSTS}
         EUREKA_HOST: ${EUREKA_HOST}
         EUREKA_PORT: ${EUREKA_PORT}
         EUREKA_INSTANCE_HOSTNAME: ${GTW_HOST}
         AUTH_HOST: ${AUTH_HOST}
         AUTH_PORT: ${AUTH_PORT}
         #TODO:
         AUTH_AUTHORIZATION: localhost
         CONFIG_SERVER_HOST: ${CONFIG_SERVER_HOST}
         CONFIG_SERVER_PORT: ${CONFIG_SERVER_PORT}
      ports:
      - ${GTW_PORT}:${GTW_PORT}
      working_dir: /app
      volumes:
         - type: bind
           source: ${LOG_HOST_DIR}
           target: ${LOG_CONTAINER_DIR}
         - type: bind
           source: ./gateway-zuul/target/
           target: /app
      command: java -jar gateway-0.0.1-SNAPSHOT-exec.jar
      depends_on:
      - kafka-setup
      - config-server
      - eureka-server

   ui1:
      image: eclipse-temurin:8-jdk-jammy
      container_name: ${UI_1}
      hostname: ${UI_1}
      networks: 
      - ${NETWORK}
      environment:
         LOG_DIR: ${LOG_DIR}
         ZOO_HOST: ${ZOO_HOST}
         ZOO_PORT: ${ZOO_PORT}
         KAFKA_HOSTS: ${KAFKA_HOSTS}
         EUREKA_HOST: ${EUREKA_HOST}
         EUREKA_INSTANCE_HOSTNAME: ${UI_1}
         AUTH_HOST: ${AUTH_HOST}
         AUTH_PORT: ${AUTH_PORT}
         CONFIG_SERVER_HOST: ${CONFIG_SERVER_HOST}
         CONFIG_SERVER_PORT: ${CONFIG_SERVER_PORT}
      working_dir: /app
      volumes:
         - type: bind
           source: ${LOG_HOST_DIR}
           target: ${LOG_CONTAINER_DIR}
         - type: bind
           source: ./ui/target/
           target: /app
      command: java -jar ui-0.0.1-SNAPSHOT-exec.jar
      depends_on:
      - gateway-server
      - eureka-server

   ui2:
      image: eclipse-temurin:8-jdk-jammy
      container_name: ${UI_2}
      hostname: ${UI_2}
      networks: 
      - ${NETWORK}
      environment:
         LOG_DIR: ${LOG_DIR}
         ZOO_HOST: ${ZOO_HOST}
         ZOO_PORT: ${ZOO_PORT}
         KAFKA_HOSTS: ${KAFKA_HOSTS}
         EUREKA_HOST: ${EUREKA_HOST}
         EUREKA_PORT: ${EUREKA_PORT}
         EUREKA_INSTANCE_HOSTNAME: ${UI_2}
         AUTH_HOST: ${AUTH_HOST}
         AUTH_PORT: ${AUTH_PORT}
         CONFIG_SERVER_HOST: ${CONFIG_SERVER_HOST}
         CONFIG_SERVER_PORT: ${CONFIG_SERVER_PORT}
      working_dir: /app
      volumes:
         - type: bind
           source: ${LOG_HOST_DIR}
           target: ${LOG_CONTAINER_DIR}
         - type: bind
           source: ./ui/target/
           target: /app
      command: java -jar ui-0.0.1-SNAPSHOT-exec.jar
      depends_on:
      - gateway-server
      - eureka-server
      
   resource1:
      image: eclipse-temurin:8-jdk-jammy
      container_name: ${RES_1}
      hostname: ${RES_1}
      networks: 
      - ${NETWORK}
      environment:
         LOG_DIR: ${LOG_DIR}
         ZOO_HOST: ${ZOO_HOST}
         ZOO_PORT: ${ZOO_PORT}
         KAFKA_HOSTS: ${KAFKA_HOSTS}
         EUREKA_HOST: ${EUREKA_HOST}
         EUREKA_PORT: ${EUREKA_PORT}
         EUREKA_INSTANCE_HOSTNAME: ${RES_1}
         AUTH_HOST: ${AUTH_HOST}
         AUTH_PORT: ${AUTH_PORT}
         CONFIG_SERVER_HOST: ${CONFIG_SERVER_HOST}
         CONFIG_SERVER_PORT: ${CONFIG_SERVER_PORT}
      working_dir: /app
      volumes:
         - type: bind
           source: ${LOG_HOST_DIR}
           target: ${LOG_CONTAINER_DIR}
         - type: bind
           source: ./resource/target/
           target: /app
      command: java -jar resource-0.0.1-SNAPSHOT-exec.jar
      depends_on:
      - gateway-server
      - eureka-server

   resource2:
      image: eclipse-temurin:8-jdk-jammy
      container_name: ${RES_2}
      hostname: ${RES_2}
      networks: 
      - ${NETWORK}
      environment:
         LOG_DIR: ${LOG_DIR}
         ZOO_HOST: ${ZOO_HOST}
         ZOO_PORT: ${ZOO_PORT}
         KAFKA_HOSTS: ${KAFKA_HOSTS}
         EUREKA_HOST: ${EUREKA_HOST}
         EUREKA_PORT: ${EUREKA_PORT}
         EUREKA_INSTANCE_HOSTNAME: ${RES_2}
         AUTH_HOST: ${AUTH_HOST}
         AUTH_PORT: ${AUTH_PORT}
         CONFIG_SERVER_HOST: ${CONFIG_SERVER_HOST}
         CONFIG_SERVER_PORT: ${CONFIG_SERVER_PORT}
      working_dir: /app
      volumes:
         - type: bind
           source: ${LOG_HOST_DIR}
           target: ${LOG_CONTAINER_DIR}
         - type: bind
           source: ./resource/target/
           target: /app
      command: java -jar resource-0.0.1-SNAPSHOT-exec.jar
      depends_on:
      - gateway-server
      - eureka-server

   customer-service1:
      image: eclipse-temurin:17-jdk-jammy
      container_name: ${CUSTOMER_1}
      hostname: ${CUSTOMER_1}
      networks: 
      - ${NETWORK}
      environment:
         LOG_DIR: ${LOG_DIR}
         ZOO_HOST: ${ZOO_HOST}
         ZOO_PORT: ${ZOO_PORT}
         KAFKA_HOSTS: ${KAFKA_HOSTS}
         EUREKA_HOST: ${EUREKA_HOST}
         EUREKA_PORT: ${EUREKA_PORT}
         EUREKA_INSTANCE_HOSTNAME: ${CUSTOMER_1}
         AUTH_HOST: ${AUTH_HOST}
         AUTH_PORT: ${AUTH_PORT}
         CONFIG_SERVER_HOST: ${CONFIG_SERVER_HOST}
         CONFIG_SERVER_PORT: ${CONFIG_SERVER_PORT}
         MYSQL_HOST: ${MYSQL_HOST}
         MYSQL_PORT: ${MYSQL_PORT}
         MYSQL_DB: ${MYSQL_DB}
         MYSQL_USER: ${MYSQL_USER}
         MYSQL_USER_PASSWORD: ${MYSQL_USER_PASSWORD}
      working_dir: /app
      volumes:
         - type: bind
           source: ${LOG_HOST_DIR}
           target: ${LOG_CONTAINER_DIR}
         - type: bind
           source: ./customer-service/target/
           target: /app
      command: java -jar customer-service-0.0.1-SNAPSHOT-exec.jar
      depends_on:
      - mysql-setup
      - gateway-server
      - eureka-server

   customer-service2:
      image: eclipse-temurin:17-jdk-jammy
      container_name: ${CUSTOMER_2}
      hostname: ${CUSTOMER_2}
      networks: 
      - ${NETWORK}
      environment:
         LOG_DIR: ${LOG_DIR}
         ZOO_HOST: ${ZOO_HOST}
         ZOO_PORT: ${ZOO_PORT}
         KAFKA_HOSTS: ${KAFKA_HOSTS}
         EUREKA_HOST: ${EUREKA_HOST}
         EUREKA_PORT: ${EUREKA_PORT}
         EUREKA_INSTANCE_HOSTNAME: ${CUSTOMER_2}
         AUTH_HOST: ${AUTH_HOST}
         AUTH_PORT: ${AUTH_PORT}
         CONFIG_SERVER_HOST: ${CONFIG_SERVER_HOST}
         CONFIG_SERVER_PORT: ${CONFIG_SERVER_PORT}
         MYSQL_HOST: ${MYSQL_HOST}
         MYSQL_PORT: ${MYSQL_PORT}
         MYSQL_DB: ${MYSQL_DB}
         MYSQL_USER: ${MYSQL_USER}
         MYSQL_USER_PASSWORD: ${MYSQL_USER_PASSWORD}
      working_dir: /app
      volumes:
         - type: bind
           source: ${LOG_HOST_DIR}
           target: ${LOG_CONTAINER_DIR}
         - type: bind
           source: ./customer-service/target/
           target: /app
      command: java -jar customer-service-0.0.1-SNAPSHOT-exec.jar
      depends_on:
      - mysql-setup
      - gateway-server
      - eureka-server

   order-service1:
      image: eclipse-temurin:17-jdk-jammy
      container_name: ${ORDER_1}
      hostname: ${ORDER_1}
      networks: 
      - ${NETWORK}
      environment:
         LOG_DIR: ${LOG_DIR}
         ZOO_HOST: ${ZOO_HOST}
         ZOO_PORT: ${ZOO_PORT}
         KAFKA_HOSTS: ${KAFKA_HOSTS}
         EUREKA_HOST: ${EUREKA_HOST}
         EUREKA_PORT: ${EUREKA_PORT}
         EUREKA_INSTANCE_HOSTNAME: ${ORDER_1}
         AUTH_HOST: ${AUTH_HOST}
         AUTH_PORT: ${AUTH_PORT}
         CONFIG_SERVER_HOST: ${CONFIG_SERVER_HOST}
         CONFIG_SERVER_PORT: ${CONFIG_SERVER_PORT}
         MONGO_HOST: ${MONGO_HOST}
         MONGO_PORT: ${MONGO_PORT}
         MONGO_DB: ${MONGO_DB}
         MONGO_USER: ${MONGO_USER}
         MONGO_USER_PASSWORD: ${MONGO_USER_PASSWORD}
      working_dir: /app
      volumes:
         - type: bind
           source: ${LOG_HOST_DIR}
           target: ${LOG_CONTAINER_DIR}
         - type: bind
           source: ./order-service/target/
           target: /app
      command: java -jar order-service-0.0.1-SNAPSHOT-exec.jar
      depends_on:
      - mongo-setup
      - gateway-server
      - eureka-server
      
   order-service2:
      image: eclipse-temurin:17-jdk-jammy
      container_name: ${ORDER_2}
      hostname: ${ORDER_2}
      networks: 
      - ${NETWORK}
      environment:
         LOG_DIR: ${LOG_DIR}
         ZOO_HOST: ${ZOO_HOST}
         ZOO_PORT: ${ZOO_PORT}
         KAFKA_HOSTS: ${KAFKA_HOSTS}
         EUREKA_HOST: ${EUREKA_HOST}
         EUREKA_PORT: ${EUREKA_PORT}
         EUREKA_INSTANCE_HOSTNAME: ${ORDER_2}
         AUTH_HOST: ${AUTH_HOST}
         AUTH_PORT: ${AUTH_PORT}
         CONFIG_SERVER_HOST: ${CONFIG_SERVER_HOST}
         CONFIG_SERVER_PORT: ${CONFIG_SERVER_PORT}
         MONGO_HOST: ${MONGO_HOST}
         MONGO_PORT: ${MONGO_PORT}
         MONGO_DB: ${MONGO_DB}
         MONGO_USER: ${MONGO_USER}
         MONGO_USER_PASSWORD: ${MONGO_USER_PASSWORD}
      working_dir: /app
      volumes:
         - type: bind
           source: ${LOG_HOST_DIR}
           target: ${LOG_CONTAINER_DIR}
         - type: bind
           source: ./order-service/target/
           target: /app
      command: java -jar order-service-0.0.1-SNAPSHOT-exec.jar
      depends_on:
      - mongo-setup
      - gateway-server
      - eureka-server